program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3404.16.1"}, {"coremlc-version", "3404.23.1"}, {"coremltools-component-torch", "2.4.0"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "8.2"}})]
{
    func main<ios15>(tensor<fp32, [1, 128]> input1, tensor<fp32, [1, 128]> input2) {
            tensor<string, []> input1_to_fp16_dtype_0 = const()[name = tensor<string, []>("input1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<string, []> input2_to_fp16_dtype_0 = const()[name = tensor<string, []>("input2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> input2_to_fp16 = cast(dtype = input2_to_fp16_dtype_0, x = input2)[name = tensor<string, []>("cast_1")];
            tensor<fp16, [1, 128]> input1_to_fp16 = cast(dtype = input1_to_fp16_dtype_0, x = input1)[name = tensor<string, []>("cast_2")];
            tensor<fp16, [1, 128]> mul_0_cast_fp16 = mul(x = input1_to_fp16, y = input2_to_fp16)[name = tensor<string, []>("mul_0_cast_fp16")];
            tensor<int32, [1]> reduce_sum_0_axes_0 = const()[name = tensor<string, []>("reduce_sum_0_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_sum_0_keep_dims_0 = const()[name = tensor<string, []>("reduce_sum_0_keep_dims_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1]> reduce_sum_0_cast_fp16 = reduce_sum(axes = reduce_sum_0_axes_0, keep_dims = reduce_sum_0_keep_dims_0, x = mul_0_cast_fp16)[name = tensor<string, []>("reduce_sum_0_cast_fp16")];
            tensor<fp16, [1, 128]> mul_1_cast_fp16 = mul(x = input1_to_fp16, y = input1_to_fp16)[name = tensor<string, []>("mul_1_cast_fp16")];
            tensor<int32, [1]> reduce_sum_1_axes_0 = const()[name = tensor<string, []>("reduce_sum_1_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_sum_1_keep_dims_0 = const()[name = tensor<string, []>("reduce_sum_1_keep_dims_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1]> reduce_sum_1_cast_fp16 = reduce_sum(axes = reduce_sum_1_axes_0, keep_dims = reduce_sum_1_keep_dims_0, x = mul_1_cast_fp16)[name = tensor<string, []>("reduce_sum_1_cast_fp16")];
            tensor<fp16, [1, 128]> mul_2_cast_fp16 = mul(x = input2_to_fp16, y = input2_to_fp16)[name = tensor<string, []>("mul_2_cast_fp16")];
            tensor<int32, [1]> reduce_sum_2_axes_0 = const()[name = tensor<string, []>("reduce_sum_2_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_sum_2_keep_dims_0 = const()[name = tensor<string, []>("reduce_sum_2_keep_dims_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1]> reduce_sum_2_cast_fp16 = reduce_sum(axes = reduce_sum_2_axes_0, keep_dims = reduce_sum_2_keep_dims_0, x = mul_2_cast_fp16)[name = tensor<string, []>("reduce_sum_2_cast_fp16")];
            tensor<fp16, [1]> mul_3_cast_fp16 = mul(x = reduce_sum_1_cast_fp16, y = reduce_sum_2_cast_fp16)[name = tensor<string, []>("mul_3_cast_fp16")];
            tensor<fp16, []> maximum_0_y_0_to_fp16 = const()[name = tensor<string, []>("maximum_0_y_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1]> maximum_0_cast_fp16 = maximum(x = mul_3_cast_fp16, y = maximum_0_y_0_to_fp16)[name = tensor<string, []>("maximum_0_cast_fp16")];
            tensor<fp16, [1]> sqrt_0_cast_fp16 = sqrt(x = maximum_0_cast_fp16)[name = tensor<string, []>("sqrt_0_cast_fp16")];
            tensor<fp16, [1]> var_5_cast_fp16 = real_div(x = reduce_sum_0_cast_fp16, y = sqrt_0_cast_fp16)[name = tensor<string, []>("op_5_cast_fp16")];
            tensor<string, []> var_5_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_5_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1]> var_5 = cast(dtype = var_5_cast_fp16_to_fp32_dtype_0, x = var_5_cast_fp16)[name = tensor<string, []>("cast_0")];
        } -> (var_5);
}